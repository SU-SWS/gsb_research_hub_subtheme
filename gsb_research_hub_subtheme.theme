<?php

/**
 * @file
 * Preprocess functions for GSB Research Hub Sub Theme.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Html;

/**
 * Prepares variables for the html.html.twig template.
 */
function gsb_research_hub_subtheme_preprocess_html(&$variables) {
  $variables['stanford_basic_path'] = \Drupal::service('extension.list.theme')->getPath('stanford_basic');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function gsb_research_hub_subtheme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!empty($variables['elements']['#id']) && $variables['elements']['#id'] == 'gsb_research_hub_subtheme_search') {
    $suggestions[] = 'block__stanford_basic_search';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function gsb_research_hub_subtheme_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['su_wysiwyg_text'])) {
    $paragraph = $variables['elements']['su_wysiwyg_text']['#object'];
    $jsonConfig = Json::decode(strip_tags($paragraph->su_wysiwyg_text->value));
    if (!is_null($jsonConfig) && isset($jsonConfig['type']) && $jsonConfig['type'] == 'airtable') {
      $suggestions[] = 'paragraph__airtable__' . $jsonConfig['view'];
    }
  }
}

function gsb_research_hub_subtheme_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  // Get the type
  $parentBundle = $paragraph->bundle();
  if ($parentBundle == 'stanford_wysiwyg') {
    $jsonConfig = Json::decode(strip_tags($paragraph->su_wysiwyg_text->value));
    if (!is_null($jsonConfig) && isset($jsonConfig['type']) && $jsonConfig['type'] == 'airtable') {
      $variables['#attached']['library'][] = 'gsb_research_hub_subtheme/airtable-list-builder';
    }
  }
}

/*
 * Implements hook_preprocess_HOOK().
 */
function gsb_research_hub_subtheme_preprocess_ds_entity_view(&$variables) {

  // if not running on a paragraph, exit out.
  if (!isset($variables['content']['#paragraph'])) {
    return;
  }

  $paragraph = $variables['content']['#paragraph'];

  // Process Banners
  if ($paragraph->bundle() == 'stanford_banner') {
    gsb_research_hub_subtheme_preprocess_banner($variables);
  }

}

/**
 * Implements hook_preprocess_banner().
 */
function gsb_research_hub_subtheme_preprocess_banner(&$variables) {

  $paragraph = $variables['content']['#paragraph'];

  unset($variables['attributes']['class'][0]);
  // Add button color style class to card wrapper.
  //$variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_button_style', 'rh-wrapper--button-green');

  // Add banner type class to card wrapper. 3rd variable provides the default type.
  //$variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_list_style', 'rh-banner-wrapper--default');

  // Select banner background color. 3rd variable provides the default type.
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_list_background_color', 'rh-banner-wrapper--background-no-color');

  // Select banner color gradient. 3rd variable provides the default type.
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_list_gradient', 'rh-banner-wrapper--background-gradient');


  // Center align the headline. 3rd variable provides the default type.
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_list_headline', 'rh-banner-wrapper--headline-center');
  
  // Select height of banner. 3rd variable provides the default type.
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_list_height', 'rh-banner-wrapper--height-medium');
    
  // Select banner text color. 
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_list_text_color', 'rh-banner-wrapper--text-color-white');
}

/**
 * Implements hook_preprocess_field().
 */
function gsb_research_hub_subtheme_preprocess_field(&$variables) {

 if ($variables['element']['#field_name'] == 'su_para_row_bgcolor') {
    $su_paragraph_row__bgcolor = $variables['items'][0]['content']['#markup'];
  }
}

// Alter the results of the people page.
function gsb_research_hub_subtheme_views_pre_render(&$view) {
  if ($view->id() === 'taxonomy_term_pages' && $view->current_display == 'people_terms') {
    $rows = $view->result;

    $newSort = array();
    foreach ($rows as $key => $row) {
      $personInfo = $row->_relationship_entities['reverse__node__su_person_type_group'];
      $personDetails = array(
        'key' => $key,
        'name' =>$personInfo->get('su_person_first_name')->getValue()[0]['value'] . ' ' . $personInfo->get('su_person_last_name')->getValue()[0]['value'],
      );
      // Assign groups depending on whether the title has faculty director in it.
      if (str_contains($personInfo->get('su_person_short_title')->getValue()[0]['value'], 'Faculty Director')) {
        $personDetails['type'] = 'Faculty Director';
      }
      else {
        $personDetails['type'] = 'Other';
      }
      $newSort[] = $personDetails;
    }

    $name = array_column($newSort, 'name');
    $type = array_column($newSort, 'type');
    array_multisort($type, SORT_ASC, $name, SORT_ASC, $newSort);

    foreach ($newSort as $key => $sortRow) {
      $view->result[$sortRow['key']]->index = $key;
    }
  }
}
